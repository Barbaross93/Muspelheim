#!/bin/sh
TAB_NON_TABBED=true

# Print help message
show_usage() {
	echo "Usage: $(basename $0) COMMAND"
	echo "Commands:"
	echo "	help"
	echo "		Show this help message"
	echo "	tab <src NODE_SEL>"
	echo "		Create a new instance of tabbed, and add nodes to it."
	echo "	add <tabbed NODE_SEL> <src NODE_SEL>"
	echo "		Add src nodes to tabbed node."
	echo "	add-all <tabbed NODE_SEL>"
	echo "		Add all tiled nodes on desktop to a tabbed instance."
	echo "	remove <tabbed NODE_SEL>"
	echo "		Remove currently open tab from tabbed."
	echo "	remove-all <tabbed NODE_SEL>"
	echo "		Remove all tabs from tabbed"
	echo "  remove-desktop <tabbed NODE_SEL> <dst DESKTOP_SEL>"
	echo "		Remove tab and move to desktop"
	echo "	add-next <tabbed NODE_SEL>"
	echo "		Add next new window to tabbed."
	echo "	add-new <tabbed NODE_SEL>"
	echo "		Auto-add all new windows on focused desktop to tabbed."
	echo "	stop-add-new"
	echo "		Stop auto-tabbing windows on this desktop."
	echo "	check-add-new"
	echo "		Print "true" if windows on current desktop are being auto-tabbed, otherwise print "false""
}

# Command for starting tabbed:
# -d: Spawn in background and print wid
# -c: Close when empty
# -k: Close open tab on windowclose, rather than entire window
tabbed_cmd="tabbed -dck"

# Get class of a wid
get_class() {
	id=$1
	xprop -id $id | sed -n '/WM_CLASS/s/.*, "\(.*\)"/\1/p'
}

# Get all leaves of a node
get_leaves() {
	nodes=$@
	for node in $nodes; do
		for descendant in $(bspc query -N $node -n .descendant_of); do
			bspc query -N -n ${descendant}.leaf
		done
	done
}

# Add a list of nodes to tabbed
add_all() {
	wid_tabbed=$1
	shift
	wids_all=$@
	for wid in $wids_all; do
		tabc $wid_tabbed add $wid
	done
}

# Exit with error if wid is not an instance of tabbed, or convert it to tabbed first if TAB_NON_TABBED set
check_tabbed() {
	wid_tabbed=$1
	if [ "$(get_class $wid_tabbed)" != "tabbed" ]; then
		if ! $TAB_NON_TABBED; then
			echo "Not an instance of tabbed" 2>&1
			exit 1
		else
			$0 tab $wid_tabbed
		fi
	else
		echo $wid_tabbed
	fi
}

# Return 1 if add-new background process is running for a given desktop, else return 0
add_new_running() {
	desktop=$1
	tmp_file="/tmp/bsptab-$USER-$desktop"
	if ! [ -f $tmp_file ]; then
		return 1
	fi
	pid=$(cat $tmp_file)

	if ps -A | grep -q "^ *$pid "; then
		return 0
	else
		return 1
	fi
}

cmd=$1
shift 2>/dev/null

case $cmd in
help)
	show_usage
	;;
tab)
	ns_src=$1

	wids_src=$(bspc query -N -n "$ns_src")
	wids_leaf=$(get_leaves $wids_src)

	if ! [ -z "$wids_leaf" ]; then
		wid_tabbed=$($tabbed_cmd)
		add_all $wid_tabbed $wids_leaf
		echo "$wid_tabbed"
	else
		echo "No leaf nodes selected" 2>&1
		exit 1
	fi
	;;
add)
	ns_tabbed=$1
	shift
	ns_src=$1
	wid_tabbed=$(bspc query -N -n "$ns_tabbed")
	wids_src=$(bspc query -N -n "$ns_src")
	wid_tabbed=$(check_tabbed $wid_tabbed)
	add_all $wid_tabbed $(get_leaves $wids_src)
	;;
add-all)
	ns_tabbed=$1

	wid_tabbed=$(bspc query -N -n "$ns_tabbed")
	wid_tabbed=$(check_tabbed $wid_tabbed)

	add_all $wid_tabbed $(bspc query -N -n ".local.tiled.!hidden")
	;;
remove)
	ns_tabbed=$1

	wid_tabbed=$(bspc query -N -n "$ns_tabbed")
	wid_tabbed=$(check_tabbed $wid_tabbed)

	wid_child=$(tabc $wid_tabbed list | head -n1)
	if ! [ -z "$wid_child" ]; then
		tabc $wid_tabbed remove $wid_child
	fi
	;;
remove-all)
	ns_tabbed=$1
	wid_tabbed=$(bspc query -N -n "$ns_tabbed")
	wid_tabbed=$(check_tabbed $wid_tabbed)

	wid_children=$(tabc $wid_tabbed list)
	if ! [ -z "$wid_children" ]; then
		for wid_child in $wid_children; do
			tabc $wid_tabbed remove $wid_child
		done
	fi
	;;
remove-desktop)
	ns_tabbed=$1
	shift
	ds=$1
	wid_tabbed=$(bspc query -N -n "$ns_tabbed")
	wid_tabbed=$(check_tabbed $wid_tabbed)
	wid_child=$(tabc $wid_tabbed list | head -n1)
	if ! [ -z "$wid_child" ]; then
		add_new="$($0 check-add-new)"
		if [ "$add_new" == "true" ]; then
			$0 stop-add-new
		fi
		tabc $wid_tabbed remove $wid_child
		bspc node $wid_child -d $ds
		if [ "$add_new" == "true" ]; then
			$0 add-new $ns_tabbed
		fi
	fi
	;;
add-next)
	ns_tabbed=$1
	wid_tabbed=$(bspc query -N -n "$ns_tabbed")
	wid_tabbed=$(check_tabbed $wid_tabbed)

	bspc subscribe node_add | while read na monitor desktop ip node; do
		if ! [ -z "$(bspc query -N -n "$node.local.tiled.!floating")" ]; then
			tabc $wid_tabbed add $node
			break
		fi
	done
	;;
add-new)
	ns_tabbed=$1
	wid_tabbed=$(bspc query -N -n "$ns_tabbed")
	wid_tabbed=$(check_tabbed $wid_tabbed)
	desktop_src=$(bspc query -D -d focused)
	tmp_file="/tmp/bsptab-$USER-$desktop_src"

	if add_new_running $desktop_src; then
		exit 0
	fi

	bspc subscribe node_add | while read na monitor desktop ip node; do
		if ! [ -z "$(bspc query -N -n "$node.tiled.!floating")" ] &&
			[ "$desktop" == "$desktop_src" ]; then

			# If tabbed instance was closed, start a new one
			if [ -z "$(bspc query -N -n $wid_tabbed)" ]; then
				wid_tabbed=$($tabbed_cmd)
			fi

			tabc $wid_tabbed add $node
		fi
	done &
	echo $! >$tmp_file
	wait
	rm $tmp_file
	;;
stop-add-new)
	desktop_src=$(bspc query -D -d focused)
	tmp_file="/tmp/bsptab-$USER-$desktop"

	if add_new_running $desktop_src; then
		kill $(cat $tmp_file)
	fi
	;;
check-add-new)
	desktop_src=$(bspc query -D -d focused)
	if add_new_running $desktop_src; then
		echo "true"
	else
		echo "false"
	fi
	;;
close)
	ns_src=$1
	wid_src=$(bspc query -N -n "$ns_src")
	if [ "$(get_class $wid_src)" == "tabbed" ]; then
		wid_child=$(tabc $wid_src list | head -n1)
		if ! [ -z "$wid_child" ]; then
			xdotool windowkill $wid_child
		fi
	else
		bspc node $ns_src -c
	fi
	;;
*)
	show_usage
	exit 1
	;;
esac
