#!/bin/bash
#
# Minimalist sysinfo script
#################################

# color escapes
BLK="\e[30m"
RED="\e[31m"
GRN="\e[32m"
YLW="\e[33m"
BLU="\e[34m"
PUR="\e[35m"
CYN="\e[36m"
BRED="\e[31m"
BGRN="\e[32m"
BYLW="\e[33m"
BBLU="\e[34m"
BPUR="\e[35m"
BCYN="\e[36m"
WHT="\e[37m"
RST="\e[0m"

# build the color bars
BAR="━━━━━"
((LEN = ${#BAR} * 6))
OUTT="$RED$BAR$GRN$BAR$YLW$BAR$BLU$BAR$PUR$BAR$CYN$BAR$RST"
OUTB="$BRED$BAR$BGRN$BAR$BYLW$BAR$BBLU$BAR$BPUR$BAR$BCYN$BAR$RST"

# array for info entries
ENTS=()

# function for creating entries
mkent() {
	if [[ "$#" != 2 ]]; then
		printf "!! invalid number of arguments to make_entry().\n"
		exit
	fi

	local ENT="$2"
	while ((${#ENT} < LEN - ${#1})); do
		ENT=" $ENT"
	done

	ENT="$CNAME""$1""$CTEXT""$ENT""$RST"
	ENTS+=("$ENT")
}

center() {
	termwidth="$(tput cols)"
	padding="$(printf '%0.1s' {1..500})"
	printf '%*.*s %s %*.*s\n' 0 "$(((termwidth - 2 - ${#1}) / 2))" "$padding" "$1" 0 "$(((termwidth - 1 - ${#1}) / 2))" "$padding"
}

# entry settings
CNAME="$BLU" # color of entry name
CTEXT="$WHT" # color of entry text

eq() { # equals  |  [ a = b ] with globbing
	case $1 in
	# if the second argument matches the first, exit normally
	$2) return ;;
		# if it doesn't match, reverse the output of `:`, which makes an error
	esac
	! :
}

if [ -e /proc/$$/comm ]; then
	## Terminal
	while [ ! "$term" ]; do
		# loop over lines in /proc/pid/status until it reaches PPid
		# then save that to a variable and exit the file
		while read -r line; do
			eq "$line" "PPid*" && ppid=${line##*:?} && break
		done <"/proc/${ppid:-$PPID}/status"

		# Make sure not to do an infinite loop
		[ "$pppid" = "$ppid" ] && break
		pppid="$ppid"

		# get name of binary
		read -r name <"/proc/$ppid/comm"

		case $name in
		*sh | "${0##*/}") ;;          # skip shells
		*[Ll]ogin* | *init*) break ;; # exit when the top is reached
		*) term="$name" ;;            # anything else can be assumed to be the terminal
		esac
	done
fi

kernel=$(uname -r)
id=$(xprop -root -notype | awk '$1=="_NET_SUPPORTING_WM_CHECK:"{print $5}')
#wm=$(xprop -id $(xprop -root -notype | awk '$1=="_NET_SUPPORTING_WM_CHECK:"{print $5}') -notype -f _NET_WM_NAME 8t | head -n1 | awk '{print $3}' | tr -d '"')
wm="bspwm"
pkgs=$(pacman -Qq | wc -l)
host=$(cat /proc/sys/kernel/hostname)
user=$(printenv USER)

#
# add entries here!
# format: mkent NAME TEXT
#
# examples:
#
#
#
mkent "User" $user@$host
mkent "OS" "$(cat /etc/os-release | grep NAME -m 1 | sed 's/NAME=//g' | sed 's/\"//g')"
mkent "Kernel" $kernel
mkent "Wm" $wm
mkent "Pkgs" $pkgs
mkent "Shell" "$(basename $(printenv SHELL))"
mkent "Term" "$term"

# find the center of the screen
COL=$(tput cols)
ROW=$(tput lines)
((PADY = ROW / 2 - 1 - ${#ENTS[@]} / 2))
((PADX = COL / 2 - LEN / 2))

for ((i = 0; i < PADX; ++i)); do
	PADC="$PADC "
done

for ((i = 0; i < PADY; ++i)); do
	PADR="$PADR\n"
done

# print everything

# but clear the screen first
clear

# vertical padding
printf "%b" "$PADR"

# sysinfo
printf "%s%b" "$PADC" "$OUTT\n"
for ENT in "${ENTS[@]}"; do
	printf "%s%b" "$PADC" "$ENT\n"
done
printf "%s%b" "$PADC" "$OUTB\n"

# hide the cursor and wait for user input
tput civis
read -n 1

# give the cursor back
tput cnorm
# Cleanup
clear
